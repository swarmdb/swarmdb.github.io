<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



  

<title type="text">Swarm.js</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://swarmjs.github.io/feed.xml" />
<link rel="alternate" type="text/html" href="http://swarmjs.github.io/" />
<updated>2014-05-26T15:26:07-04:00</updated>
<id>http://swarmjs.github.io/</id>
<author>
  <name>Victor Grishchenko</name>
  <uri>http://swarmjs.github.io/</uri>
  <email>victor.grishchenko@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Logs and docs]]></title>
  <link rel="alternate" type="text/html" href="http://swarmjs.github.io/articles/on-kreps/"/>
  <id>http://swarmjs.github.io/articles/on-kreps</id>
  <updated>2013-05-31T00:00:00-00:00</updated>
  <published>2013-12-17T00:00:00-05:00</published>
  
  <author>
    <name>Victor Grishchenko</name>
    <uri>http://swarmjs.github.io</uri>
    <email>victor.grishchenko@gmail.com</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;Jay Kreps of LinkedIn recently made an excellent detailed 
&lt;a href=&quot;http://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying&quot;&gt;360° overview post&lt;/a&gt;
explaining why &lt;em&gt;log&lt;/em&gt; is an underlying data structure of pretty
much everything in distributed systems. Well, I feel tempted to add
that same holds true for collaborative editing (like in Google Docs
and others). Also, I’d like to point out the relation between
partially ordered logs, the 
&lt;a href=&quot;http://alistapart.com/article/offline-first&quot;&gt;offline&lt;/a&gt;-&lt;a href=&quot;http://developer.chrome.com/apps/offline_apps.html&quot;&gt;first&lt;/a&gt;
approach, &lt;a href=&quot;http://en.wikipedia.org/wiki/CAP_theorem&quot;&gt;AP&lt;/a&gt; systems and the
so-called Web 3.0 (like in &lt;a href=&quot;http://meteor.com/&quot;&gt;Meteor&lt;/a&gt;,
&lt;a href=&quot;http://pouchdb.com/&quot;&gt;pouchdb&lt;/a&gt;.
Any real-time approach to collaborative editing
decomposes a document into a sequence of atomic operations. The most
known one is
&lt;a href=&quot;http://en.wikipedia.org/wiki/Operational_transformation&quot;&gt;OT&lt;/a&gt;,
also there is
the WOOT/CRDT based family, including
&lt;a href=&quot;http://bouillon.math.usu.ru/articles/ctre.pdf&quot;&gt;CT&lt;/a&gt;. GDocs is an OT
system. I did a CT system currently in beta at 
&lt;a href=&quot;http://letters.yandex.ru&quot;&gt;letters.yandex.ru&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that
&lt;em&gt;letters&lt;/em&gt; is a tiny pilot project which is totally incomparable
to GDocs in terms of man-years spent (I expect at least two orders of
magnitude difference; three is even more likely). Still,
&lt;em&gt;letters&lt;/em&gt; works offline effortlessly from the day one; if your
WiFi flaps badly, you may not even notice that. GDocs implemented
offline mode after some years of work and it works sorta conditionally
(i.e. there are caveats, like a native extension is needed and the
browser must be Chrome). This villariba-villabajo story definitely
deserves some explanation. &lt;/p&gt;

&lt;p&gt;In a
real-time collaborative editor, concurrent operations come “faster”
than they are propagated so it is no longer possible to pretend there
is any linear order of events (which doesn’t exist in distributed
systems anyway). Hence, OT &lt;em&gt;transforms&lt;/em&gt; operations to achieve
the same final text independently of their partial order. Because of
transformations and cross-dependencies, operations become entangled
and complexity snowballs.&lt;/p&gt;

&lt;p&gt;Meanwhile, the CT borrows some serious tricks from the
land of hardcore distributed systems, namely (1) 
&lt;a href=&quot;http://www.cs.rutgers.edu/~pxk/417/notes/clocks/index.html&quot;&gt;Lamport timestamps&lt;/a&gt;
(2) &lt;a href=&quot;http://en.wikipedia.org/wiki/Vector_clock&quot;&gt;vector clocks&lt;/a&gt;
and (3) &lt;a href=&quot;http://en.wikipedia.org/wiki/Partially_ordered_set&quot;&gt;partially ordered&lt;/a&gt;
logs of immutable operations. Attaching a timestamp to every letter
seems a pipe dream in the beginning, but it works quite well in
practice. Having 100KB of text instead of 10KB is not a major
burden. Regarding less-ordered operation logs, Mr Kreps
mentions them in the context of hardcore AP systems and 
&lt;a href=&quot;http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf&quot;&gt;Amazon
Dynamo&lt;/a&gt;
in particular. These logs are trickier to use as they require
application-specific reconciliation, but such a system scales much
much better. (That’s why I’ll never buy MongoDB’s “humongous”
scalability claims. Turn it that way or another, but MongoDB is a
single-master system from the &lt;a href=&quot;http://blog.mongodb.org/post/475279604/on-distributed-consistency-part-1&quot;&gt;C
corner&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AP techniques let CT handle cases of high
&lt;a href=&quot;http://en.wikipedia.org/wiki/Round-trip_delay_time&quot;&gt;RTT&lt;/a&gt;
nicely
including of course the extreme case of offline work (which means RTT
of several hours or days essentially). There are several points in a
CT system where operations from different sources are simply mixed
together effortlessly and the result is correct.&lt;/p&gt;

&lt;p&gt;So, let me do some speculation on the future of
so-called Web 3.0 technologies. WebSocket allows for real-time message
exchange between a browser and a server; WebStorage and IndexedDB
allow to keep data at the client and WebRTC let browsers talk to each
other. These new technologies definitely support the trend of more
data and more code being pushed closer to the end user and farther
from the server. But the latter aspect is a great inconvenience.&lt;/p&gt;

&lt;p&gt;The first reaction of developers was to
proxy a database to the client to have a familiar LAMP-like
architecture inside the browser instead of the server. Well, there are
two shortcomings here. First, proxying a single-master system to
zillions of real-world clients actually puts it into the native land
of AP systems. Which is a round peg, square hole situation. And even
if we use an AP database, such level of fontend-backend tight coupling
is not necessarily good. So, I see those as the ugly first
generation of “Web 3.0” systems.&lt;/p&gt;

&lt;p&gt;My bet stays with some sort of AP middleware using
all the serious tricks inside the browser. As we see from the
aforementioned &lt;em&gt;letters&lt;/em&gt; system, that is perfectly
feasible. Even in a situation when every keystroke is an event in
a partially ordered log.&lt;/p&gt;

&lt;p&gt;Interesting times are
coming.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://swarmjs.github.io/articles/on-kreps/&quot;&gt;Logs and docs&lt;/a&gt; was originally published by Victor Grishchenko at &lt;a href=&quot;http://swarmjs.github.io&quot;&gt;Swarm.js&lt;/a&gt; on December 17, 2013.&lt;/p&gt;</content>
</entry>

</feed>
